---
description: Goroutine/동시성/메모리 안전 규칙(컨텍스트·캔슬·워커풀·락·채널)
globs:
  - "internal/**/**/*.go"
  - "**/*worker*.go"
  - "**/*concurrency*.go"
---

# GO CONCURRENCY SAFETY

**기본 원칙**
- **항상** `ctx`로 취소 전파, goroutine 시작 시 `go func(ctx context.Context){...}(ctx)`
- 워커풀: 고정 크기 + 버퍼 채널 + graceful shutdown(WaitGroup + ctx.Done)
- 타임아웃/리트라이는 호출자에서 정의, 지수백오프는 `time.After` 또는 외부 패키지 사용
- 공유 상태 접근은 최소화; 필요 시 `sync.Mutex` 또는 `atomic` 사용
- 채널 close는 송신측 책임. close 이후 write 금지.

**패턴 스니펫 (요구 시 생성하도록)**
- `RunGroup`/`errgroup` 기반 멀티 작업
- cancellable ticker (select + ctx.Done)
- bounded parallel map/reduce
- 메모리 프로파일/레이스 `-race` 플래그 실행 및 보고
